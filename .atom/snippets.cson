# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'.source.js':
  'Console log':
    'prefix': 'log'
    'body': 'console.log("${1:param}", $1)'
  'Console info':
    'prefix': 'info'
    'body': 'console.info($1)'
  # Jasmine test framework
  # ======================
  'Describe block':
    prefix: 'des'
    body: "describe('${1:description}', () => {\n\t$2\n})$3"
  'It block':
    prefix: 'it'
    body: "it('${1:description}', () => {\n\t$2\n})$3"
  'After-Each block':
    prefix: 'aft'
    body: "afterEach(() => {\n\t$1\n})$2"
  'Before-Each block':
    prefix: 'bef'
    body: "beforeEach(() => {\n\t$1\n})$2"
  'spyOn':
    prefix: 'spy'
    body:   "spyOn(${1:target}, '${2:method}')$3"
  '.callThrough':
    prefix: '.call'
    body:   ".callThrough()$1"
  '.returnValue':
    prefix: '.ret'
    body:   ".returnValue(${1:value})$2"
  '.callFake':
    prefix: '.callf'
    body:   '.callFake(${1:value})$2'
  '.throwError':
    prefix: '.thr'
    body:   ".throwError('${1:error}')$2"
  'jasmine.createSpy':
    prefix: 'spy'
    body:   "${1:target} = jasmine.createSpy('${1:target}')$2"
  'jasmine.createSpyObj':
    prefix: 'spy'
    body:   "${1:obj} = jasmine.createSpyObj('${1:obj}', ['${2:method}'])$3"
# React
  'React Component':
    prefix: 'react component'
    body: "import React, { Component } from 'react'\n\nclass $1 extends Component {\n\trender() {\n\t\treturn (\n\t\t\t$2\n\t\t)\n\t}\n}\n\nexport default $1"
  'Local React Component':
    prefix: 'react local component'
    body: 'class $1 extends Component {\n\trender() {\n\t\treturn (\n\t\t\t$2\n\t\t)\n\t}\n}'
  'React constructor':
    prefix: 'rconstructor'
    body: 'constructor(props) {\n\tsuper(props)\n\t$1\n}\n'

'.source.php':
  'Debug tag':
    prefix: 'deb'
    body: '<debug><?php $1; ?></debug>'
