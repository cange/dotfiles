#
# General
# ------------------------------------------------------------------------------
# Prototype
snippet proto
	${1:module}.prototype.${2:method} = function (${3:argument}) {
		${4:// code…}
	};
# Function
snippet fu
	function ${1:name}(${2:args}) {
		${3}
	}
# Anonymous Function
snippet f
	function (${1:args}) {
		${2}
	}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:expression}) {
		${2}
	}
	else {
		${3}
	}
# switch
snippet switch
	switch (${1:expression}) {
		case '${2}':
			${3}
			break;
		default:
			${4}
	}
# case
snippet case
	case '${1}':
		${2}
		break;
	${3}
# for (...) {...} (Incremental for-loop)
snippet fori
	for (var ${2:i} = 0, len = ${1:array}.length; $2 < len; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Decremental for-loop)
snippet ford
	for (var ${2:d} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:condition}) {
		${2:// code…}
	}
# do...while
snippet do
	do {
		${2:// code…}
	} while (${1:condition});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet tout
	setTimeout(function () {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}

snippet log
	console.log('${1:value}', $1);
snippet info
	console.info('${1:state}');
# jQuery syntax
snippet .suc
	.success(function (${1:args}) {
		${2:// code…}
	});
snippet .err
	.success(function (${1:args}) {
		${2:// code…}
	});
snippet .fi
	.find(${1:args})${2:next}
snippet ready
	$(function () {
		'use strict';

		${1:// code…}
	});
snippet ev # direct
	${1:$('selector')}.${2:click}(function (${3:event}) {
		var $this = $(this);
	});
snippet ev # on direct
	${1:$('selector')}.on('${2:click}', function (${3:event}) {
		var $this = $(this);
		${4}
	});
snippet ev # on delegated
	${1:$('main_selector')}.on('${2:click}', '${3:subSelector}', function (${4:event}) {
		var $this = $(this);
		${5}
	});
#
# Jasmine test framework
# ------------------------------------------------------------------------------
snippet be
	beforeEach(function () {
		${1}
	});
snippet de
	describe('${1}', function () {
		${2}
	});
snippet ex
	expect(${1}).to${2}
snippet it
	it('${1}', function () {
		${2}
	});
snippet ru
	runs(function () {
		${1}
	});
snippet wait
	waitsFor(function () {
		${1}
	});
#
# Jasmine matcher
# --------------------------------------
snippet to #  HaveBeenCalled
	toHaveBeenCalled();
snippet to #  HaveBeenCalledWith
	toHaveBeenCalledWith(${1});
snippet to #  Equal
	toEqual(${1});
snippet to #  Be
	toBe(${1});
snippet to #  BeTruthy
	toBeTruthy();
snippet to #  BeFalsy
	toBeFalsy();
snippet to #  BeDefined
	toBeDefined();
snippet to #  BeUndefined
	toBeUndefined();
snippet to #  Contain
	toContain(${1});
snippet to # BeNull
	toBeNull();
snippet to # BeNaN
	toBeNaN();
snippet to # Match
	toMatch(/${1:pattern}/);
snippet to # Throw
	toThrow();
snippet to # ThrowError
	toThrowError(${1:matcher});
snippet to # BeLessThan
	toBeLessThan(${1});
snippet to # BeGreaterThan
	toBeGreaterThan(${1});
snippet to # BeCloseTo
	toBeCloseTo(${1});
#
# Jasmine spies
# --------------------------------------
snippet and # callThrough
	and.callThrough()
snippet and # returnValue
	and.returnValue(${1})
snippet and # returnValues
	and.returnValue(${1:args})
snippet and # throwError
	and.throwError()
snippet and # callFake
	and.callFake(function () {
		${1}
	});
snippet and # stub
	and.stub();
snippet and # identity
	and.identity();
#
# Jasmine spy
# --------------------------------------
snippet spy # spyOn
	spyOn(${1:subject}, '${2:method}');
snippet spy # Spy
	jasmine.createSpy(${1});
snippet spy # SpyObj
	jasmine.createSpyObj(${1}, ['${2:methods}']);
snippet any
	jasmine.anything()
#
# Design pattern
# ------------------------------------------------------------------------------
snippet closure
	(function ($1) {
		${3:// code…}
	})(${1:value});
# jQuery syntax

snippet module
	var ${1:modulePatternName} = (function ($) {

		'use strict';

		var module = {};
		//privateVariable = 1;

		//function privateMethod() {
		//  ...
		//}
		//module.moduleProperty = 1;
		//module.moduleMethod = function () {
		//  ...
		//};

		return module;
	}(jQuery));

snippet constructor
	var ${1:cunstructorPatternName} = function ($) {

		'use strict';

		//function privateMethod() {};
		//this.publicMethod() {};
	};
#
# d3 SVG framework
# ------------------------------------------------------------------------------
snippet d3 # select
	d3.select('${1}')${2}
snippet d3 # selectAll
	d3.selectAll('${1}')${2}
snippet on # d3 event listener
	on('${1:evenName}', ${2:callback})
snippet ap # d3 append
	append('${1:name}'})
snippet cl # d3 classed
	classed('${1:name}', ${2:[value]})
snippet at # d3 attr
	attr('${1:name}', ${2:[value]})
