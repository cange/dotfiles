# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {
		${4:// code…}
	};
# Function
snippet fu
	function ${1:function_name}(${2:argument}) {
		${3:// code…}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${2}
	}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code…}
			break;
		${5}
		default:
			${2:// code…}
	}
# case
snippet case
	case '${1:case}':
		${2:// code…}
		break;
	${3}
# for (...) {...} (Incremental for-loop)
snippet fori
	for (var ${2:i} = 0, len = ${1:array}.length; $2 < len; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Decremental for-loop)
snippet ford
	for (var ${2:d} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:condition}) {
		${2:// code…}
	}
# do...while
snippet do
	do {
		${2:// code…}
	} while (${1:condition});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet tout
	setTimeout(function () {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}

snippet log
	console.log("${1:value} %o${2}", $1);
snippet info
	console.info('${1:state}');
snippet closure
	(function ($1) {
		${3:// code…}
	})(${1:value});
# jQuery syntax
snippet .suc
	.success(function (${1:args}) {
		${2:// code…}
	});
snippet .err
	.success(function (${1:args}) {
		${2:// code…}
	});
snippet .fi
	.find(${1:args})${2:next}
snippet ready
	$(function () {
		'use strict';

		${1:// code…}
	});
snippet ev - direct
	${1:$('selector')}.${2:click}(function (${3:event}) {
		var $this = $(this);
	});
snippet ev - on direct
	${1:$('selector')}.on('${2:click}', function (${3:event}) {
		var $this = $(this);
		${4}
	});
snippet ev - on delegated
	${1:$('main_selector')}.on('${2:click}', '${3:subSelector}', function (${4:event}) {
		var $this = $(this);
		${5}
	});

snippet module
	var ${1:modulePatternName} = (function ($) {

		'use strict';

		var module = {};
		//privateVariable = 1;

		//function privateMethod() {
		//  ...
		//}
		//module.moduleProperty = 1;
		//module.moduleMethod = function () {
		//  ...
		//};

		return module;
	}(jQuery));

snippet constructor
	var ${1:cunstructorPatternName} = function ($) {

		'use strict';

		//function privateMethod() {};
		//this.publicMethod() {};
	};

snippet qa
	asyncTest('${1:name}', ${2:expected})

snippet qd # deepEqual
	deepEqual(${1:actual}, ${2:expected});

snippet qe # equal
	equal(${1:actual}, ${2:expected}});

snippet qex # expect
	expect(${1:amount});

snippet qm
	module('${1:name}', ${2:lifecycle});

snippet qo
	ok(${1:state}, ${2:message});

snippet qs # strictEqual
	strictEqual(${1:actual}, ${2:expected});

snippet qt # test
	test('${1:title}', function () {
		${2}
	});

snippet qth # throws
	throws(${1:block}, ${2:expected});

snippet qcb
	QUnit.begin(${1:callback});

snippet qcb
	QUnit.done(${1:callback});

snippet qcb
	QUnit.log(${1:callback});

snippet qcb
	QUnit.moduleDone(${1:callback});

snippet qcb
	QUnit.moduleStart(${1:callback});

snippet qcb
	QUnit.testDone(${1:callback});

snippet qcb
	QUnit.testStart(${1:callback});

# Jasmine test framework
snippet ex
	expect(${1:actual).${2}};

snippet ru
	runs(function () {
		${2}
	});

snippet wait
	waitsFor(function () {
		${2}
	});

snippet be # beforeEach
	beforeEach(function () {
		${2}
	});

snippet it
	it('${1}', function () {
		${2}
	});

snippet de
	describe('${1}', function () {
		${2}
	});

snippet to # truthy
	toBeTruthy();

snippet to # falsy
	toBeFalsy();

snippet to # equal
	toEqual(${1});

snippet to # be
	toBe(${1});

snippet to # match
	toMatch(${1:pattern});

snippet to # defined
	toBeDefined();

snippet to # undefined
	toBeUndefined();

snippet to # null
	toBeNull();

snippet to # true
	toContain(${1});

snippet to # true
	toBeLessThan(${1});

snippet to # true
	toBeGreaterThan(${1});


snippet toh # called
	toHaveBeenCalled();

snippet toh # called with
	toHaveBeenCalledWith();


snippet and # through
	andCalledThrough();

snippet and # return
	andReturn(${1});

snippet and # fake
	andCallFake(function () {
		${1}
	});

snippet spy # spy
	jasmine.createSpy(${1});

snippet spy # spyobject
	jasmine.createspyobject(${1});

snippet any
	any(${1});
