snippet closure
	(function ($1) {
		${3:// codeâ€¦}
	})(${1:value});

snippet module
	var ${1:modulePatternName} = (function ($) {

		'use strict';

		var module = {};
		//privateVariable = 1;

		//function privateMethod() {
		//	...
		//}
		//module.moduleProperty = 1;
		//module.moduleMethod = function () {
		//	...
		//};

		return module;
	}(jQuery));


snippet constructor
	var ${1:cunstructorPatternName} = function ($) {

		'use strict';

		//function privateMethod() {};
		//this.publicMethod() {};
	};

# class
snippet class # ES5
	(function (namespace, ${4:dependencyAlias}) {
		'use strict';

		var ${1:ClassName} = function () {},
				proto = $1.prototype
		;

		proto.init = function () {
			${5:// happy coding :)}
		};

		namespace.create('${2:namespace}').$1 = $1;

	})(Namespace, ${3:dependency});
snippet class # ES6
	class ${1:name} {
		constructor () {
			${2:// happy coding :)}
		}
	}
snippet singleton
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
snippet exports # Object
	module.exports = {

		${1}

	};
snippet exports # Function
	module.exports = function (${1:agrs}) {

		${2}

	};
