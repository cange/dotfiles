#
# Jasmine test framework
#
snippet be
	beforeEach(function () {
		${1}
	});
snippet de
	describe('${1}', function () {
		${2}
	});
snippet ex
	expect(${1}).to${2}
snippet it
	it('${1}', function () {
		${2}
	});
snippet ru
	runs(function () {
		${1}
	});
snippet wait
	waitsFor(function () {
		${1}
	});
#
# Jasmine matcher
#
snippet to #  HaveBeenCalled
	toHaveBeenCalled();
snippet to #  HaveBeenCalledWith
	toHaveBeenCalledWith(${1});
snippet to #  Equal
	toEqual(${1});
snippet to #  Be
	toBe(${1});
snippet to #  BeTruthy
	toBeTruthy();
snippet to #  BeFalsy
	toBeFalsy();
snippet to #  BeDefined
	toBeDefined();
snippet to #  BeUndefined
	toBeUndefined();
snippet to #  Contain
	toContain(${1});
snippet to # BeNull
	toBeNull();
snippet to # BeNaN
	toBeNaN();
snippet to # Match
	toMatch(/${1:pattern}/);
snippet to # Throw
	toThrow();
snippet to # ThrowError
	toThrowError(${1:matcher});
snippet to # BeLessThan
	toBeLessThan(${1});
snippet to # BeGreaterThan
	toBeGreaterThan(${1});
snippet to # BeCloseTo
	toBeCloseTo(${1});
#
# Jasmine spies
#
snippet and # callThrough
	and.callThrough()
snippet and # returnValue
	and.returnValue(${1})
snippet and # returnValues
	and.returnValue(${1:args})
snippet and # throwError
	and.throwError()
snippet and # callFake
	and.callFake(function () {
		${1}
	});
snippet and # stub
	and.stub();
snippet and # identity
	and.identity();
#
# Jasmine spy
#
snippet spy # spyOn
	spyOn(${1:subject}, '${2:method}');
snippet spy # Spy
	jasmine.createSpy(${1});
snippet spy # SpyObj
	jasmine.createSpyObj(${1}, ['${2:methods}']);
snippet any
	jasmine.anything()
