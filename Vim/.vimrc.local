if has("gui_running")
  colorscheme cange
  :set guioptions-=r
else
  set t_Co=256
  colorscheme cange
endif

source $VIMRUNTIME/mswin.vim
" add shortcut behavior like other gui text editors
behave mswin

let mapleader = "," " Change From Backslash to Comma in commands \a -> ,a

" NERDTree (Press ,e)
map <leader>e :execute 'NERDTreeToggle ' . getcwd()<CR>

" Gundo Vim (f5)
map <leader>gu :execute ':GundoToggle'<CR>

set nocompatible            " Make vim more useful
set softtabstop=2
set shiftwidth=2
set tabstop=2               " Make tabs as wide as two spaces
set expandtab
set colorcolumn=80
set cursorline              " Highlight current line
set gdefault                " Add the g flag to search/replace by default
"folding settings
set foldmethod=indent       " fold based on indent
set foldnestmax=10          " deepest fold is 10 levels
set nofoldenable            " dont fold by default
set foldlevel=1             " this is just what i use
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list
"tab-completion for buffers
set wildmenu                " Enhance command-line completion
set wildmode=list:longest
set hls                     " highlight search
set ignorecase              " Ignore case of searches
set incsearch               " Highlight dynamically as pattern is typed
set mouse=a                 " Enable mouse in all modes
set title                   " Show the filename in the window titlebar
set showcmd                 " Show the (partial) command as it’s being typed
" Turn on smart indent
set smartindent
set nowrap
set number                  " Enable line numbers

match OverLength /\%81v.\+/ " set variable for over length

"remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" enable everytime CSS autocompletion
if &ft == 'css' || &ft == 'scss' || &ft == 'sass' || &ft == 'stylus' || &ft == 'less'
  " JavaScript and HTML completion is not useful
  " map double tab as call
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  " let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
  imap <TAB><TAB> <C-X><C-O>
endif

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Shortcut for commenting. T-Comment plugin
map <leader>c <C-_><C-_>

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" This is a dependency for vim-textobj-rubyblock
runtime macros/matchit.vim

" Some stuff for tabular
if exists(":Tabularize")
  nmap <leader>a= :Tabularize /=<CR>
  vmap <leader>a= :Tabularize /=<CR>
  nmap <leader>a: :Tabularize /:\zs<CR>
  vmap <leader>a: :Tabularize /:\zs<CR>
endif

noremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction


" command to open files with uncommitted changes
" https://github.com/garybernhardt/dotfiles/commit/86d12f24cd2301af99a2966f0dc9a082cdee2cb7
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git ls-files -m')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

" Strip trailing whitespace (,ss)
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>
" Save a file as root (,W)
" noremap <leader>W :w !sudo tee % > /dev/null<CR>


" Keep Block visually marked when indenting
nmap > ><CR>gv
nmap < <<CR>gv
vmap > ><CR>gv
vmap < <<CR>gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Syntastic-specific config settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" use signs to indicate lines with errors
" only if signs are available
if has('signs')
   let g:syntastic_enable_signs = 1
endif

" automatically open the location list when a buffer has errors
let g:syntastic_auto_loc_list=1

" always show warnings
let g:syntastic_quiet_warnings=0

" No Check for HTML
let g:syntastic_disabled_filetypes = ['html']

" In vimdiff Mode do not auto-show the errors
if &diff
  let g:syntastic_auto_loc_list=2
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" JavaScript settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" JSLINT
""""""""""
" Enalble jsLint
filetype plugin on
" Since we are going to invoke :make all the time, I’m going to bind it to F4.
" Step by step:
"   :w — save the file, doesn’t hurt if it’s already saved
"   :make — invoke make
"   :cw — open the quickfix window if there are errors. Close it if there are no errors.
" @link http://technotales.wordpress.com/2011/05/21/node-jslint-and-vim/
nmap <F4> :w<CR>
" nmap <F4> :w<CR>:make<CR>:cw<CR>

" JSbeautify setting
""""""""""""""""""""""
let s:opt_indent_char = "  "



" TODO Remove this when you not working at XING
"
"https://confluence.xing.hh/confluence/display/ENV/Local+Sandbox+Setup+%28Mac+OSX%29
" source /media/truecrypt1/pandora/tools/rsync_sandbox.vim
" noremap <leader>s :call SyncToSandbox()<cr>
" save and sync xing pandora sandbox resources
" noremap <leader>s :wall<cr>:call SyncToSandbox()<cr>:echo "done"<cr>
