if has("gui_running")
  colorscheme cange
  :set cursorline
  :set guioptions-=r
else
  set t_Co=256
  colorscheme cange
endif

let mapleader = "," " Change From Backslash to Comma in commands \a -> ,a

" NERDTree (Press ,e)
map <leader>e :execute 'NERDTreeToggle ' . getcwd()<CR>

" Gundo Vim (f5)
map <leader>gu :execute ':GundoToggle'<CR>

set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab
set colorcolumn=80
" set variable for over length
match OverLength /\%81v.\+/

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"tab-completion for buffers
set wildmenu
set wildmode=list:longest

" highlight search
set hls

"remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Shortcut for commenting. T-Comment plugin
map <leader>c <c-_><c-_>


" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" FuzzyFinder (and github.com/jamis/fuzzyfinder_textmate)
let g:fuzzy_ignore = "*.log"
let g:fuzzy_matching_limit = 70
"map <leader>t :FufFile<CR>

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" This is a dependency for vim-textobj-rubyblock
runtime macros/matchit.vim

" Some stuff for tabular
if exists(":Tabularize")
  nmap <leader>a= :Tabularize /=<CR>
  vmap <leader>a= :Tabularize /=<CR>
  nmap <leader>a: :Tabularize /:\zs<CR>
  vmap <leader>a: :Tabularize /:\zs<CR>
endif

noremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a


function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction


" command to open files with uncommitted changes
" https://github.com/garybernhardt/dotfiles/commit/86d12f24cd2301af99a2966f0dc9a082cdee2cb7
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git ls-files -m')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()


" Keep Block visually marked when indenting
nmap > ><CR>gv
nmap < <<CR>gv
vmap > ><CR>gv
vmap < <<CR>gv



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Syntastic-specific config settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" use signs to indicate lines with errors
" only if signs are available
if has('signs')
   let g:syntastic_enable_signs = 1
endif

" automatically open the location list when a buffer has errors
let g:syntastic_auto_loc_list=1

" always show warnings
let g:syntastic_quiet_warnings=0

" No Check for HTML
let g:syntastic_disabled_filetypes = ['html']

" In vimdiff Mode do not auto-show the errors
if &diff
  let g:syntastic_auto_loc_list=2
endif


" Turn on smart indent
set smartindent
set nowrap
set number

" add shortcut behavior like other gui text editors
" behave mswin



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" JavaScript settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" JSLINT
""""""""""
" Enalble jsLint
filetype plugin on
" Since we are going to invoke :make all the time, I’m going to bind it to F4.
" Step by step:
"   :w — save the file, doesn’t hurt if it’s already saved
"   :make — invoke make
"   :cw — open the quickfix window if there are errors. Close it if there are no errors.
" @link http://technotales.wordpress.com/2011/05/21/node-jslint-and-vim/
nmap <F4> :w<CR>
" nmap <F4> :w<CR>:make<CR>:cw<CR>

" JSbeautify setting
""""""""""""""""""""""
let s:opt_indent_char = "  "



" TODO Remove this when you not working at XING
"
"https://confluence.xing.hh/confluence/display/ENV/Local+Sandbox+Setup+%28Mac+OSX%29
" source /media/truecrypt1/pandora/tools/rsync_sandbox.vim
" noremap <leader>s :call SyncToSandbox()<cr>
" save and sync xing pandora sandbox resources
" noremap <leader>s :wall<cr>:call SyncToSandbox()<cr>:echo "done"<cr>
