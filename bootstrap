#!/bin/zsh
#
# This CLI automates un/-linking of all required dotfile sources.

# --- config ---
IS_UNINSTALL=false
SCRIPT_NAME=$(basename "$0")
ERRORS=()
readonly DOTFILES="$HOME/dotfiles"

# --- helpers ---
function chalk() {
  local color=$1
  local text=$2

  case $color in
    red) printf "\033[31m%s\033[0m" "$text" ;;
    green) printf "\033[32m%s\033[0m" "$text" ;;
    yellow) printf "\033[33m%s\033[0m" "$text" ;;
    white) printf "\033[1;38m%s\033[0m" "$text" ;;
    *) printf "\033[30m%s\033[0m" "$text" ;;
  esac
}

function log() {
  printf "  %s %s\n" "$(chalk "yellow" "ℹ︎")" "$1"
}

function success () {
  printf "  %s %s\n" "$(chalk "green" "✓")" "$1"
}

function fail () {
  printf "  %s %s\n" "$(chalk "red" "✕")" "$1"
}

function toggle_link() {
  local src=$1
  local dest=$2
  local dest_dir=$(dirname $dest)

  if [[ $IS_UNINSTALL == true ]]; then
    if [[ -e $dest ]]; then
      rm "$dest"
      success "unlink -x $(chalk "white" "$src")"
    else
      ERRORS+=("unlink: No such file or directory $(chalk "white" "$dest")")
    fi
  else
    if [[ -d "$dest_dir" ]]; then
      ln -nsf "$src" "$dest"
      success "symlink -> $(chalk "white" "$dest")"
    else
      ERRORS+=("symlink: No such file or directory $(chalk "white" "$dest_dir")")
    fi
  fi
}

function execute() {
  local state="linking"
  if [[ $IS_UNINSTALL == true ]]; then state="unlinking"; fi
  log "Initiate $state dotfiles:"

  find -H "$DOTFILES" -maxdepth 2 -name 'symlinks.prop' -not -path '*.git*' | while read file
  do
    cat "$file" | while read mapping
    do
      local src=$(eval echo "$mapping" | cut -d '=' -f 1)
      local dest=$(eval echo "$mapping" | cut -d '=' -f 2)
      toggle_link "$src" "$dest"
    done
  done
}

function prop() {
  local key=$1
  local file=$2
  echo $(eval echo "$(cat $file | grep "$key" | cut -d'=' -f2)")
}

function summary {
  if [[ ${#ERRORS[@]} -gt 0 ]]; then
    for err in "${ERRORS[@]}"; do
      fail "$err"
    done
    fail "Completed with errors!" >&2
    exit 1
  else
    success "Successfully completed."
  fi
}

# --- commands ---
function help {
  echo "Handles the linking of dotfile configuration.

Usage: $SCRIPT_NAME [options] <command>

Commands:
  link    Writes all symlinks for the corresponding files
  unlink  Removes all symlinks for the corresponding files
  help    Print help.
"
}

function link() {
  execute
  summary
}

function unlink() {
  IS_UNINSTALL=true
  link
}

# --- interface ---
typeset -A subcmds=(
  help "help"
  link "link"
  unlink "unlink"
)
emulate -L zsh
[[ -z "$subcmds[$1]" ]] && { help; return 1 } || ${subcmds[$1]}
