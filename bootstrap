#!/bin/zsh
#
# This CLI automates un/-linking of all required dotfile sources.

# --- config ---
IS_UNINSTALL=false
SCRIPT_NAME=$(basename "$0")
ERRORS=()
readonly DOTFILES_DIR="$HOME/dotfiles/"

# --- locations ---
readonly CONFIG_INCLUDES=(nvim snippets zsh)
readonly CONFIG_TARGET_DIR="$HOME/.config/"
readonly ROOT_INCLUDES=(.ackrc .gitconfig .tool-versions .zshrc .zprofile)
readonly ROOT_TARGET_DIR="$HOME/"

# --- helpers ---
function chalk() {
  local color=$1
  local text=$2

  case $color in
  red) printf "\033[31m%s\033[0m" "$text" ;;
  green) printf "\033[32m%s\033[0m" "$text" ;;
  yellow) printf "\033[33m%s\033[0m" "$text" ;;
  white) printf "\033[1;38m%s\033[0m" "$text" ;;
  *) printf "\033[30m%s\033[0m" "$text" ;;
  esac
}

function log() {
  printf "    - %s\n" "$1"
}

function toggle_link() {
  local target_dir=$1
  local filename=$2
  local file=$3
  local target_path=$target_dir$filename

  if [[ $IS_UNINSTALL == true ]]; then
    if [[ -e $target_path ]]; then
      rm "$target_path"
      log "unlink -x $(chalk "white" "$filename")"
    else
      ERRORS+=("unlink: No such file or directory $(chalk "white" "$target_path")")
    fi
  else
    if [[ -e $target_dir ]]; then
      ln -nsf "$file" "$target_path"
      log "symlink -> $(chalk "white" "$filename")"
    else
      ERRORS+=("symlink: No such file or directory $(chalk "white" "$target_dir")")
    fi
  fi
}

function update_links() {
  local target_dir=$1
  local includes=("$@")

  printf "  %s %s\n" "$(chalk "yellow" "ℹ︎")" "Initiate dotfiles linking for $(chalk "white" "$target_dir")"

  setopt dotglob
  for file in "$DOTFILES_DIR"*; do
    filename=$(basename "$file")
    for include in "${includes[@]}"; do
      if [[ "$filename" == "$include" ]]; then
        toggle_link "$target_dir" "$filename" "$file"
      fi
    done
  done
  unsetopt dotglob
}

function execute {
  update_links "$ROOT_TARGET_DIR" "${ROOT_INCLUDES[@]}"
  update_links "$CONFIG_TARGET_DIR" "${CONFIG_INCLUDES[@]}"
}

function summary {
  if [[ ${#ERRORS[@]} -gt 0 ]]; then
    printf "  %s %s\n" "$(chalk "red" "✕")" "Completed with errors!" >&2
    for err in "${ERRORS[@]}"; do
      log "$err"
    done
    exit 1
  else
    printf "  %s %s\n" "$(chalk "green" "✓")" "Successfully completed."
  fi
}

# --- commands ---
function help {
  echo "Handles the linking of dotfile configuration.

Usage: $SCRIPT_NAME [options] <command>

Commands:
  link    Writes all symlinks for the corresponding files
  unlink  Removes all symlinks for the corresponding files
  help    Print help.
"
}

function link() {
  execute
  summary
}

function unlink() {
  IS_UNINSTALL=true
  execute
  summary
}

# --- interface ---
typeset -A subcmds=(
  help "help"
  link "link"
  unlink "unlink"
)
emulate -L zsh
[[ -z "$subcmds[$1]" ]] && { help; return 1 } || ${subcmds[$1]}
