{
  "describe setup block": {
    "prefix": "describe",
    "body": "describe('${1:context}', () => {\n\tlet wrapper$2\n})"
  },
  "describe(when…)": {
    "prefix": "when",
    "body": "describe('when ${1:condition}', () => {\n\t$2\n})$3"
  },
  "describe(with…)": {
    "prefix": "with",
    "body": "describe('with ${1:condition}', () => {\n\t$2\n})$3"
  },
  "it": {
    "prefix": "it(…",
    "body": "it('$1', () => {\n\t$2\n})"
  },
  "afterEach": {
    "prefix": "afterEach(…",
    "body": "afterEach(() => {\n\t$1\n})"
  },
  "beforeEach": {
    "prefix": "beforeEach(…",
    "body": "beforeEach(() => {\n\t$1\n})"
  },
  "expect(wrapper": {
    "prefix": "expect(wrapper",
    "body": "expect(wrapper.$1).to$0"
  },
  "expect(subject": {
    "prefix": "expect(subject",
    "body": "expect(subject.$1).to$0"
  },
  "only": {
    "prefix": ".only",
    "body": ".only"
  },
  "attributes": {
    "prefix": ".attributes",
    "body": ".attributes('$1')"
  },
  "vue wrapper debug": {
    "prefix": "logdebug",
    "body": "console.log(`--- $1$2.html(): %o`, ${1:wrapper}$2.html())"
  },
  "expect.arraytContaining": {
    "prefix": "arrayContaining",
    "body": "expect.arrayContaining([$1])$0"
  },
  "expect.objectContaining": {
    "prefix": "objectContaining",
    "body": "expect.objectContaining({$1})$0"
  },
  "expect.stringContaining": {
    "prefix": "stringContaining",
    "body": "expect.stringContaining('$1')$0"
  },
  "expect.stringMatching": {
    "prefix": "stringMatching",
    "body": "expect.stringMatching(/$1/)$0"
  },
  "toEqual": {
    "prefix": "toequal",
    "body": "toEqual($1)$0"
  },
  "toBe": {
    "prefix": "tobe",
    "body": "toBe($1)$0"
  },
  "toBeDefined": {
    "prefix": "tobedefined",
    "body": "toBeDefined()$0"
  },
  "toBeUndefined": {
    "prefix": "tobeundefined",
    "body": "toBeUndefined()$0"
  },
  "toBeNull": {
    "prefix": "tobenull",
    "body": "toBeNull()"
  },
  "toBeTruthy": {
    "prefix": "tobetrue",
    "body": "toBe(true)"
  },
  "toBeFalsy": {
    "prefix": "tobefalse",
    "body": "toBe(false)"
  },
  "toBeCalled": {
    "prefix": "tobecalled",
    "body": "toBeCalled()"
  },
  "toBeCalledWith": {
    "prefix": "tobecalledwith",
    "body": "toBeCalledWith($1)"
  },
  "toHaveLength": {
    "prefix": "tohavelength",
    "body": "toHaveLength($1)"
  },
  "specHelper": {
    "prefix": "specHelper",
    "body": "const specHelper = {\n\t$1: ($2) => {\n\t\t$3\n\t}$4\n}"
  }
}
